Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:
    >>> lis = MyList()
    >>> type(lis) == MyList
    True

Correct Instance test:
    >>> lis = MyList()
    >>> isinstance(lis, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> lis.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> lis.print_sorted([1, 2, 3])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> lis.print_sorted([1, 2, 3], 4)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list test:
    >>> lis = MyList()
    >>> lis.print_sorted()
    []

Normal list test:
    >>> lis = MyList([3, 2, 1])
    >>> lis.print_sorted()
    [1, 2, 3]

Normal list test 2:
    >>> lis = MyList([1, 2, 4, 3, 5])
    >>> lis.print_sorted()
    [1, 2, 3, 4, 5]

Negative neg ints list test:
    >>> lis = MyList([-1001, -99, -232565, 0, -23423434, -127])
    >>> lis.print_sorted()
    [-23423434, -232565, -1001, -127, -99, 0]

Original list unchanged:
    >>> lis = MyList([2, 10, 1, -11, 20, 200, 0])
    >>> lis.print_sorted()
    [-11, 0, 1, 2, 10, 20, 200]
    >>> lis
    [2, 10, 1, -11, 20, 200, 0]

List already in order:
    >>> lis = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> lis.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

Test append:
    >>> lis = MyList()
    >>> lis.append(10)
    >>> lis
    [10]
